{"version":3,"sources":["../node_modules/victor/index.js","../node_modules/underscore/underscore.js","../lib/room.js","../lib/tile.js","../lib/index.js","main.js"],"names":["Room","x","y","width","height","prototype","getBoundingBox","top","right","bottom","left","intersects","other","Error","r1","r2","module","exports","Tile","type","neighbours","setNeighbours","Victor","require","_","getTileNESW","tile","tiles","n","push","e","s","w","Dungeon","numRoomTries","extraConnectorChance","roomExtraSize","windingPercent","_rooms","_currentRegion","stage","cardinalDirections","bindStage","givenStage","_tiles","getTile","setTile","region","RangeError","fill","ne","se","sw","nw","build","_addRooms","_growMaze","_connectRegions","_removeDeadEnds","rooms","startX","startY","cells","lastDir","Object","keys","filter","length","_startRegion","_carve","count","cell","unmadeCells","dir","_canCarve","stringifiedCells","map","v","toString","indexOf","random","clone","rand","carveLoc1","add","toObject","carveLoc2","pop","i","size","rectangularity","Math","floor","_oneIn","room","overlaps","carveArea","j","regionConnections","forEach","row","tileRegions","unique","isUndefined","key","join","each","connections","index","splice","conn","num","done","cycle","t","direction","end","dest","options","dungeoneer","packageJSON","canvas","document","querySelector","ctx","getContext","imageSmoothingEnabled","create","cellSize","dungeon","console","log","style","fillStyle","fillRect","addEventListener","classList","remove","$version","createElement","innerText","version","body","appendChild"],"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","file":"main.eac335a3.map","sourceRoot":"../demo","sourcesContent":["exports = module.exports = Victor;\n\n/**\n * # Victor - A JavaScript 2D vector class with methods for common vector operations\n */\n\n/**\n * Constructor. Will also work without the `new` keyword\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = Victor(42, 1337);\n *\n * @param {Number} x Value of the x axis\n * @param {Number} y Value of the y axis\n * @return {Victor}\n * @api public\n */\nfunction Victor (x, y) {\n\tif (!(this instanceof Victor)) {\n\t\treturn new Victor(x, y);\n\t}\n\n\t/**\n\t * The X axis\n\t *\n\t * ### Examples:\n\t *     var vec = new Victor.fromArray(42, 21);\n\t *\n\t *     vec.x;\n\t *     // => 42\n\t *\n\t * @api public\n\t */\n\tthis.x = x || 0;\n\n\t/**\n\t * The Y axis\n\t *\n\t * ### Examples:\n\t *     var vec = new Victor.fromArray(42, 21);\n\t *\n\t *     vec.y;\n\t *     // => 21\n\t *\n\t * @api public\n\t */\n\tthis.y = y || 0;\n};\n\n/**\n * # Static\n */\n\n/**\n * Creates a new instance from an array\n *\n * ### Examples:\n *     var vec = Victor.fromArray([42, 21]);\n *\n *     vec.toString();\n *     // => x:42, y:21\n *\n * @name Victor.fromArray\n * @param {Array} array Array with the x and y values at index 0 and 1 respectively\n * @return {Victor} The new instance\n * @api public\n */\nVictor.fromArray = function (arr) {\n\treturn new Victor(arr[0] || 0, arr[1] || 0);\n};\n\n/**\n * Creates a new instance from an object\n *\n * ### Examples:\n *     var vec = Victor.fromObject({ x: 42, y: 21 });\n *\n *     vec.toString();\n *     // => x:42, y:21\n *\n * @name Victor.fromObject\n * @param {Object} obj Object with the values for x and y\n * @return {Victor} The new instance\n * @api public\n */\nVictor.fromObject = function (obj) {\n\treturn new Victor(obj.x || 0, obj.y || 0);\n};\n\n/**\n * # Manipulation\n *\n * These functions are chainable.\n */\n\n/**\n * Adds another vector's X axis to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.addX(vec2);\n *     vec1.toString();\n *     // => x:30, y:10\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addX = function (vec) {\n\tthis.x += vec.x;\n\treturn this;\n};\n\n/**\n * Adds another vector's Y axis to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.addY(vec2);\n *     vec1.toString();\n *     // => x:10, y:40\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addY = function (vec) {\n\tthis.y += vec.y;\n\treturn this;\n};\n\n/**\n * Adds another vector to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.add(vec2);\n *     vec1.toString();\n *     // => x:30, y:40\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.add = function (vec) {\n\tthis.x += vec.x;\n\tthis.y += vec.y;\n\treturn this;\n};\n\n/**\n * Adds the given scalar to both vector axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalar(2);\n *     vec.toString();\n *     // => x: 3, y: 4\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addScalar = function (scalar) {\n\tthis.x += scalar;\n\tthis.y += scalar;\n\treturn this;\n};\n\n/**\n * Adds the given scalar to the X axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalarX(2);\n *     vec.toString();\n *     // => x: 3, y: 2\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addScalarX = function (scalar) {\n\tthis.x += scalar;\n\treturn this;\n};\n\n/**\n * Adds the given scalar to the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalarY(2);\n *     vec.toString();\n *     // => x: 1, y: 4\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addScalarY = function (scalar) {\n\tthis.y += scalar;\n\treturn this;\n};\n\n/**\n * Subtracts the X axis of another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtractX(vec2);\n *     vec1.toString();\n *     // => x:80, y:50\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractX = function (vec) {\n\tthis.x -= vec.x;\n\treturn this;\n};\n\n/**\n * Subtracts the Y axis of another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtractY(vec2);\n *     vec1.toString();\n *     // => x:100, y:20\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractY = function (vec) {\n\tthis.y -= vec.y;\n\treturn this;\n};\n\n/**\n * Subtracts another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtract(vec2);\n *     vec1.toString();\n *     // => x:80, y:20\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtract = function (vec) {\n\tthis.x -= vec.x;\n\tthis.y -= vec.y;\n\treturn this;\n};\n\n/**\n * Subtracts the given scalar from both axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalar(20);\n *     vec.toString();\n *     // => x: 80, y: 180\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractScalar = function (scalar) {\n\tthis.x -= scalar;\n\tthis.y -= scalar;\n\treturn this;\n};\n\n/**\n * Subtracts the given scalar from the X axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalarX(20);\n *     vec.toString();\n *     // => x: 80, y: 200\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractScalarX = function (scalar) {\n\tthis.x -= scalar;\n\treturn this;\n};\n\n/**\n * Subtracts the given scalar from the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalarY(20);\n *     vec.toString();\n *     // => x: 100, y: 180\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractScalarY = function (scalar) {\n\tthis.y -= scalar;\n\treturn this;\n};\n\n/**\n * Divides the X axis by the x component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 0);\n *\n *     vec.divideX(vec2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Victor} vector The other vector you want divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideX = function (vector) {\n\tthis.x /= vector.x;\n\treturn this;\n};\n\n/**\n * Divides the Y axis by the y component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(0, 2);\n *\n *     vec.divideY(vec2);\n *     vec.toString();\n *     // => x:100, y:25\n *\n * @param {Victor} vector The other vector you want divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideY = function (vector) {\n\tthis.y /= vector.y;\n\treturn this;\n};\n\n/**\n * Divides both vector axis by a axis values of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 2);\n *\n *     vec.divide(vec2);\n *     vec.toString();\n *     // => x:50, y:25\n *\n * @param {Victor} vector The vector to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divide = function (vector) {\n\tthis.x /= vector.x;\n\tthis.y /= vector.y;\n\treturn this;\n};\n\n/**\n * Divides both vector axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalar(2);\n *     vec.toString();\n *     // => x:50, y:25\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideScalar = function (scalar) {\n\tif (scalar !== 0) {\n\t\tthis.x /= scalar;\n\t\tthis.y /= scalar;\n\t} else {\n\t\tthis.x = 0;\n\t\tthis.y = 0;\n\t}\n\n\treturn this;\n};\n\n/**\n * Divides the X axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalarX(2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideScalarX = function (scalar) {\n\tif (scalar !== 0) {\n\t\tthis.x /= scalar;\n\t} else {\n\t\tthis.x = 0;\n\t}\n\treturn this;\n};\n\n/**\n * Divides the Y axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalarY(2);\n *     vec.toString();\n *     // => x:100, y:25\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideScalarY = function (scalar) {\n\tif (scalar !== 0) {\n\t\tthis.y /= scalar;\n\t} else {\n\t\tthis.y = 0;\n\t}\n\treturn this;\n};\n\n/**\n * Inverts the X axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invertX();\n *     vec.toString();\n *     // => x:-100, y:50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.invertX = function () {\n\tthis.x *= -1;\n\treturn this;\n};\n\n/**\n * Inverts the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invertY();\n *     vec.toString();\n *     // => x:100, y:-50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.invertY = function () {\n\tthis.y *= -1;\n\treturn this;\n};\n\n/**\n * Inverts both axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invert();\n *     vec.toString();\n *     // => x:-100, y:-50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.invert = function () {\n\tthis.invertX();\n\tthis.invertY();\n\treturn this;\n};\n\n/**\n * Multiplies the X axis by X component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 0);\n *\n *     vec.multiplyX(vec2);\n *     vec.toString();\n *     // => x:200, y:50\n *\n * @param {Victor} vector The vector to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyX = function (vector) {\n\tthis.x *= vector.x;\n\treturn this;\n};\n\n/**\n * Multiplies the Y axis by Y component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(0, 2);\n *\n *     vec.multiplyX(vec2);\n *     vec.toString();\n *     // => x:100, y:100\n *\n * @param {Victor} vector The vector to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyY = function (vector) {\n\tthis.y *= vector.y;\n\treturn this;\n};\n\n/**\n * Multiplies both vector axis by values from a given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 2);\n *\n *     vec.multiply(vec2);\n *     vec.toString();\n *     // => x:200, y:100\n *\n * @param {Victor} vector The vector to multiply by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiply = function (vector) {\n\tthis.x *= vector.x;\n\tthis.y *= vector.y;\n\treturn this;\n};\n\n/**\n * Multiplies both vector axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalar(2);\n *     vec.toString();\n *     // => x:200, y:100\n *\n * @param {Number} The scalar to multiply by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyScalar = function (scalar) {\n\tthis.x *= scalar;\n\tthis.y *= scalar;\n\treturn this;\n};\n\n/**\n * Multiplies the X axis by the given scalar\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalarX(2);\n *     vec.toString();\n *     // => x:200, y:50\n *\n * @param {Number} The scalar to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyScalarX = function (scalar) {\n\tthis.x *= scalar;\n\treturn this;\n};\n\n/**\n * Multiplies the Y axis by the given scalar\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalarY(2);\n *     vec.toString();\n *     // => x:100, y:100\n *\n * @param {Number} The scalar to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyScalarY = function (scalar) {\n\tthis.y *= scalar;\n\treturn this;\n};\n\n/**\n * Normalize\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.normalize = function () {\n\tvar length = this.length();\n\n\tif (length === 0) {\n\t\tthis.x = 1;\n\t\tthis.y = 0;\n\t} else {\n\t\tthis.divide(Victor(length, length));\n\t}\n\treturn this;\n};\n\nVictor.prototype.norm = Victor.prototype.normalize;\n\n/**\n * If the absolute vector axis is greater than `max`, multiplies the axis by `factor`\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.limit(80, 0.9);\n *     vec.toString();\n *     // => x:90, y:50\n *\n * @param {Number} max The maximum value for both x and y axis\n * @param {Number} factor Factor by which the axis are to be multiplied with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.limit = function (max, factor) {\n\tif (Math.abs(this.x) > max){ this.x *= factor; }\n\tif (Math.abs(this.y) > max){ this.y *= factor; }\n\treturn this;\n};\n\n/**\n * Randomizes both vector axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomize(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:67, y:73\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomize = function (topLeft, bottomRight) {\n\tthis.randomizeX(topLeft, bottomRight);\n\tthis.randomizeY(topLeft, bottomRight);\n\n\treturn this;\n};\n\n/**\n * Randomizes the y axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeX(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:55, y:50\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomizeX = function (topLeft, bottomRight) {\n\tvar min = Math.min(topLeft.x, bottomRight.x);\n\tvar max = Math.max(topLeft.x, bottomRight.x);\n\tthis.x = random(min, max);\n\treturn this;\n};\n\n/**\n * Randomizes the y axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeY(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:100, y:66\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomizeY = function (topLeft, bottomRight) {\n\tvar min = Math.min(topLeft.y, bottomRight.y);\n\tvar max = Math.max(topLeft.y, bottomRight.y);\n\tthis.y = random(min, max);\n\treturn this;\n};\n\n/**\n * Randomly randomizes either axis between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeAny(new Victor(50, 60), new Victor(70, 80));\n *     vec.toString();\n *     // => x:100, y:77\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomizeAny = function (topLeft, bottomRight) {\n\tif (!! Math.round(Math.random())) {\n\t\tthis.randomizeX(topLeft, bottomRight);\n\t} else {\n\t\tthis.randomizeY(topLeft, bottomRight);\n\t}\n\treturn this;\n};\n\n/**\n * Rounds both axis to an integer value\n *\n * ### Examples:\n *     var vec = new Victor(100.2, 50.9);\n *\n *     vec.unfloat();\n *     vec.toString();\n *     // => x:100, y:51\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.unfloat = function () {\n\tthis.x = Math.round(this.x);\n\tthis.y = Math.round(this.y);\n\treturn this;\n};\n\n/**\n * Rounds both axis to a certain precision\n *\n * ### Examples:\n *     var vec = new Victor(100.2, 50.9);\n *\n *     vec.unfloat();\n *     vec.toString();\n *     // => x:100, y:51\n *\n * @param {Number} Precision (default: 8)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.toFixed = function (precision) {\n\tif (typeof precision === 'undefined') { precision = 8; }\n\tthis.x = this.x.toFixed(precision);\n\tthis.y = this.y.toFixed(precision);\n\treturn this;\n};\n\n/**\n * Performs a linear blend / interpolation of the X axis towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mixX(vec2, 0.5);\n *     vec.toString();\n *     // => x:150, y:100\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.mixX = function (vec, amount) {\n\tif (typeof amount === 'undefined') {\n\t\tamount = 0.5;\n\t}\n\n\tthis.x = (1 - amount) * this.x + amount * vec.x;\n\treturn this;\n};\n\n/**\n * Performs a linear blend / interpolation of the Y axis towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mixY(vec2, 0.5);\n *     vec.toString();\n *     // => x:100, y:150\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.mixY = function (vec, amount) {\n\tif (typeof amount === 'undefined') {\n\t\tamount = 0.5;\n\t}\n\n\tthis.y = (1 - amount) * this.y + amount * vec.y;\n\treturn this;\n};\n\n/**\n * Performs a linear blend / interpolation towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mix(vec2, 0.5);\n *     vec.toString();\n *     // => x:150, y:150\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.mix = function (vec, amount) {\n\tthis.mixX(vec, amount);\n\tthis.mixY(vec, amount);\n\treturn this;\n};\n\n/**\n * # Products\n */\n\n/**\n * Creates a clone of this vector\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = vec1.clone();\n *\n *     vec2.toString();\n *     // => x:10, y:10\n *\n * @return {Victor} A clone of the vector\n * @api public\n */\nVictor.prototype.clone = function () {\n\treturn new Victor(this.x, this.y);\n};\n\n/**\n * Copies another vector's X component in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copyX(vec1);\n *\n *     vec2.toString();\n *     // => x:20, y:10\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.copyX = function (vec) {\n\tthis.x = vec.x;\n\treturn this;\n};\n\n/**\n * Copies another vector's Y component in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copyY(vec1);\n *\n *     vec2.toString();\n *     // => x:10, y:20\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.copyY = function (vec) {\n\tthis.y = vec.y;\n\treturn this;\n};\n\n/**\n * Copies another vector's X and Y components in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copy(vec1);\n *\n *     vec2.toString();\n *     // => x:20, y:20\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.copy = function (vec) {\n\tthis.copyX(vec);\n\tthis.copyY(vec);\n\treturn this;\n};\n\n/**\n * Sets the vector to zero (0,0)\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *\t\t var1.zero();\n *     vec1.toString();\n *     // => x:0, y:0\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.zero = function () {\n\tthis.x = this.y = 0;\n\treturn this;\n};\n\n/**\n * Calculates the dot product of this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.dot(vec2);\n *     // => 23000\n *\n * @param {Victor} vector The second vector\n * @return {Number} Dot product\n * @api public\n */\nVictor.prototype.dot = function (vec2) {\n\treturn this.x * vec2.x + this.y * vec2.y;\n};\n\nVictor.prototype.cross = function (vec2) {\n\treturn (this.x * vec2.y ) - (this.y * vec2.x );\n};\n\n/**\n * Projects a vector onto another vector, setting itself to the result.\n *\n * ### Examples:\n *     var vec = new Victor(100, 0);\n *     var vec2 = new Victor(100, 100);\n *\n *     vec.projectOnto(vec2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Victor} vector The other vector you want to project this vector onto\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.projectOnto = function (vec2) {\n    var coeff = ( (this.x * vec2.x)+(this.y * vec2.y) ) / ((vec2.x*vec2.x)+(vec2.y*vec2.y));\n    this.x = coeff * vec2.x;\n    this.y = coeff * vec2.y;\n    return this;\n};\n\n\nVictor.prototype.horizontalAngle = function () {\n\treturn Math.atan2(this.y, this.x);\n};\n\nVictor.prototype.horizontalAngleDeg = function () {\n\treturn radian2degrees(this.horizontalAngle());\n};\n\nVictor.prototype.verticalAngle = function () {\n\treturn Math.atan2(this.x, this.y);\n};\n\nVictor.prototype.verticalAngleDeg = function () {\n\treturn radian2degrees(this.verticalAngle());\n};\n\nVictor.prototype.angle = Victor.prototype.horizontalAngle;\nVictor.prototype.angleDeg = Victor.prototype.horizontalAngleDeg;\nVictor.prototype.direction = Victor.prototype.horizontalAngle;\n\nVictor.prototype.rotate = function (angle) {\n\tvar nx = (this.x * Math.cos(angle)) - (this.y * Math.sin(angle));\n\tvar ny = (this.x * Math.sin(angle)) + (this.y * Math.cos(angle));\n\n\tthis.x = nx;\n\tthis.y = ny;\n\n\treturn this;\n};\n\nVictor.prototype.rotateDeg = function (angle) {\n\tangle = degrees2radian(angle);\n\treturn this.rotate(angle);\n};\n\nVictor.prototype.rotateTo = function(rotation) {\n\treturn this.rotate(rotation-this.angle());\n};\n\nVictor.prototype.rotateToDeg = function(rotation) {\n\trotation = degrees2radian(rotation);\n\treturn this.rotateTo(rotation);\n};\n\nVictor.prototype.rotateBy = function (rotation) {\n\tvar angle = this.angle() + rotation;\n\n\treturn this.rotate(angle);\n};\n\nVictor.prototype.rotateByDeg = function (rotation) {\n\trotation = degrees2radian(rotation);\n\treturn this.rotateBy(rotation);\n};\n\n/**\n * Calculates the distance of the X axis between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceX(vec2);\n *     // => -100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distanceX = function (vec) {\n\treturn this.x - vec.x;\n};\n\n/**\n * Same as `distanceX()` but always returns an absolute number\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.absDistanceX(vec2);\n *     // => 100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Absolute distance\n * @api public\n */\nVictor.prototype.absDistanceX = function (vec) {\n\treturn Math.abs(this.distanceX(vec));\n};\n\n/**\n * Calculates the distance of the Y axis between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceY(vec2);\n *     // => -10\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distanceY = function (vec) {\n\treturn this.y - vec.y;\n};\n\n/**\n * Same as `distanceY()` but always returns an absolute number\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceY(vec2);\n *     // => 10\n *\n * @param {Victor} vector The second vector\n * @return {Number} Absolute distance\n * @api public\n */\nVictor.prototype.absDistanceY = function (vec) {\n\treturn Math.abs(this.distanceY(vec));\n};\n\n/**\n * Calculates the euclidean distance between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distance(vec2);\n *     // => 100.4987562112089\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distance = function (vec) {\n\treturn Math.sqrt(this.distanceSq(vec));\n};\n\n/**\n * Calculates the squared euclidean distance between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceSq(vec2);\n *     // => 10100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distanceSq = function (vec) {\n\tvar dx = this.distanceX(vec),\n\t\tdy = this.distanceY(vec);\n\n\treturn dx * dx + dy * dy;\n};\n\n/**\n * Calculates the length or magnitude of the vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.length();\n *     // => 111.80339887498948\n *\n * @return {Number} Length / Magnitude\n * @api public\n */\nVictor.prototype.length = function () {\n\treturn Math.sqrt(this.lengthSq());\n};\n\n/**\n * Squared length / magnitude\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.lengthSq();\n *     // => 12500\n *\n * @return {Number} Length / Magnitude\n * @api public\n */\nVictor.prototype.lengthSq = function () {\n\treturn this.x * this.x + this.y * this.y;\n};\n\nVictor.prototype.magnitude = Victor.prototype.length;\n\n/**\n * Returns a true if vector is (0, 0)\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     vec.zero();\n *\n *     // => true\n *\n * @return {Boolean}\n * @api public\n */\nVictor.prototype.isZero = function() {\n\treturn this.x === 0 && this.y === 0;\n};\n\n/**\n * Returns a true if this vector is the same as another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(100, 50);\n *     vec1.isEqualTo(vec2);\n *\n *     // => true\n *\n * @return {Boolean}\n * @api public\n */\nVictor.prototype.isEqualTo = function(vec2) {\n\treturn this.x === vec2.x && this.y === vec2.y;\n};\n\n/**\n * # Utility Methods\n */\n\n/**\n * Returns an string representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toString();\n *     // => x:10, y:20\n *\n * @return {String}\n * @api public\n */\nVictor.prototype.toString = function () {\n\treturn 'x:' + this.x + ', y:' + this.y;\n};\n\n/**\n * Returns an array representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toArray();\n *     // => [10, 20]\n *\n * @return {Array}\n * @api public\n */\nVictor.prototype.toArray = function () {\n\treturn [ this.x, this.y ];\n};\n\n/**\n * Returns an object representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toObject();\n *     // => { x: 10, y: 20 }\n *\n * @return {Object}\n * @api public\n */\nVictor.prototype.toObject = function () {\n\treturn { x: this.x, y: this.y };\n};\n\n\nvar degrees = 180 / Math.PI;\n\nfunction random (min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction radian2degrees (rad) {\n\treturn rad * degrees;\n}\n\nfunction degrees2radian (deg) {\n\treturn deg / degrees;\n}\n","//     Underscore.js 1.9.1\n//     http://underscorejs.org\n//     (c) 2009-2018 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` (`self`) in the browser, `global`\n  // on the server, or `this` in some virtual machines. We use `self`\n  // instead of `window` for `WebWorker` support.\n  var root = typeof self == 'object' && self.self === self && self ||\n            typeof global == 'object' && global.global === global && global ||\n            this ||\n            {};\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype;\n  var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var push = ArrayProto.push,\n      slice = ArrayProto.slice,\n      toString = ObjProto.toString,\n      hasOwnProperty = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var nativeIsArray = Array.isArray,\n      nativeKeys = Object.keys,\n      nativeCreate = Object.create;\n\n  // Naked function reference for surrogate-prototype-swapping.\n  var Ctor = function(){};\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for their old module API. If we're in\n  // the browser, add `_` as a global object.\n  // (`nodeType` is checked to ensure that `module`\n  // and `exports` are not HTML elements.)\n  if (typeof exports != 'undefined' && !exports.nodeType) {\n    if (typeof module != 'undefined' && !module.nodeType && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {\n    root._ = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.9.1';\n\n  // Internal function that returns an efficient (for current engines) version\n  // of the passed-in callback, to be repeatedly applied in other Underscore\n  // functions.\n  var optimizeCb = function(func, context, argCount) {\n    if (context === void 0) return func;\n    switch (argCount == null ? 3 : argCount) {\n      case 1: return function(value) {\n        return func.call(context, value);\n      };\n      // The 2-argument case is omitted because we’re not using it.\n      case 3: return function(value, index, collection) {\n        return func.call(context, value, index, collection);\n      };\n      case 4: return function(accumulator, value, index, collection) {\n        return func.call(context, accumulator, value, index, collection);\n      };\n    }\n    return function() {\n      return func.apply(context, arguments);\n    };\n  };\n\n  var builtinIteratee;\n\n  // An internal function to generate callbacks that can be applied to each\n  // element in a collection, returning the desired result — either `identity`,\n  // an arbitrary callback, a property matcher, or a property accessor.\n  var cb = function(value, context, argCount) {\n    if (_.iteratee !== builtinIteratee) return _.iteratee(value, context);\n    if (value == null) return _.identity;\n    if (_.isFunction(value)) return optimizeCb(value, context, argCount);\n    if (_.isObject(value) && !_.isArray(value)) return _.matcher(value);\n    return _.property(value);\n  };\n\n  // External wrapper for our callback generator. Users may customize\n  // `_.iteratee` if they want additional predicate/iteratee shorthand styles.\n  // This abstraction hides the internal-only argCount argument.\n  _.iteratee = builtinIteratee = function(value, context) {\n    return cb(value, context, Infinity);\n  };\n\n  // Some functions take a variable number of arguments, or a few expected\n  // arguments at the beginning and then a variable number of values to operate\n  // on. This helper accumulates all remaining arguments past the function’s\n  // argument length (or an explicit `startIndex`), into an array that becomes\n  // the last argument. Similar to ES6’s \"rest parameter\".\n  var restArguments = function(func, startIndex) {\n    startIndex = startIndex == null ? func.length - 1 : +startIndex;\n    return function() {\n      var length = Math.max(arguments.length - startIndex, 0),\n          rest = Array(length),\n          index = 0;\n      for (; index < length; index++) {\n        rest[index] = arguments[index + startIndex];\n      }\n      switch (startIndex) {\n        case 0: return func.call(this, rest);\n        case 1: return func.call(this, arguments[0], rest);\n        case 2: return func.call(this, arguments[0], arguments[1], rest);\n      }\n      var args = Array(startIndex + 1);\n      for (index = 0; index < startIndex; index++) {\n        args[index] = arguments[index];\n      }\n      args[startIndex] = rest;\n      return func.apply(this, args);\n    };\n  };\n\n  // An internal function for creating a new object that inherits from another.\n  var baseCreate = function(prototype) {\n    if (!_.isObject(prototype)) return {};\n    if (nativeCreate) return nativeCreate(prototype);\n    Ctor.prototype = prototype;\n    var result = new Ctor;\n    Ctor.prototype = null;\n    return result;\n  };\n\n  var shallowProperty = function(key) {\n    return function(obj) {\n      return obj == null ? void 0 : obj[key];\n    };\n  };\n\n  var has = function(obj, path) {\n    return obj != null && hasOwnProperty.call(obj, path);\n  }\n\n  var deepGet = function(obj, path) {\n    var length = path.length;\n    for (var i = 0; i < length; i++) {\n      if (obj == null) return void 0;\n      obj = obj[path[i]];\n    }\n    return length ? obj : void 0;\n  };\n\n  // Helper for collection methods to determine whether a collection\n  // should be iterated as an array or as an object.\n  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n  var getLength = shallowProperty('length');\n  var isArrayLike = function(collection) {\n    var length = getLength(collection);\n    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;\n  };\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles raw objects in addition to array-likes. Treats all\n  // sparse array-likes as if they were dense.\n  _.each = _.forEach = function(obj, iteratee, context) {\n    iteratee = optimizeCb(iteratee, context);\n    var i, length;\n    if (isArrayLike(obj)) {\n      for (i = 0, length = obj.length; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n      var keys = _.keys(obj);\n      for (i = 0, length = keys.length; i < length; i++) {\n        iteratee(obj[keys[i]], keys[i], obj);\n      }\n    }\n    return obj;\n  };\n\n  // Return the results of applying the iteratee to each element.\n  _.map = _.collect = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length,\n        results = Array(length);\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  // Create a reducing function iterating left or right.\n  var createReduce = function(dir) {\n    // Wrap code that reassigns argument variables in a separate function than\n    // the one that accesses `arguments.length` to avoid a perf hit. (#1991)\n    var reducer = function(obj, iteratee, memo, initial) {\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length,\n          index = dir > 0 ? 0 : length - 1;\n      if (!initial) {\n        memo = obj[keys ? keys[index] : index];\n        index += dir;\n      }\n      for (; index >= 0 && index < length; index += dir) {\n        var currentKey = keys ? keys[index] : index;\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\n      }\n      return memo;\n    };\n\n    return function(obj, iteratee, memo, context) {\n      var initial = arguments.length >= 3;\n      return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);\n    };\n  };\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`.\n  _.reduce = _.foldl = _.inject = createReduce(1);\n\n  // The right-associative version of reduce, also known as `foldr`.\n  _.reduceRight = _.foldr = createReduce(-1);\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, predicate, context) {\n    var keyFinder = isArrayLike(obj) ? _.findIndex : _.findKey;\n    var key = keyFinder(obj, predicate, context);\n    if (key !== void 0 && key !== -1) return obj[key];\n  };\n\n  // Return all the elements that pass a truth test.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, predicate, context) {\n    var results = [];\n    predicate = cb(predicate, context);\n    _.each(obj, function(value, index, list) {\n      if (predicate(value, index, list)) results.push(value);\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, predicate, context) {\n    return _.filter(obj, _.negate(cb(predicate)), context);\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;\n    }\n    return true;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Aliased as `any`.\n  _.some = _.any = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n    return false;\n  };\n\n  // Determine if the array or object contains a given item (using `===`).\n  // Aliased as `includes` and `include`.\n  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {\n    if (!isArrayLike(obj)) obj = _.values(obj);\n    if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n    return _.indexOf(obj, item, fromIndex) >= 0;\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = restArguments(function(obj, path, args) {\n    var contextPath, func;\n    if (_.isFunction(path)) {\n      func = path;\n    } else if (_.isArray(path)) {\n      contextPath = path.slice(0, -1);\n      path = path[path.length - 1];\n    }\n    return _.map(obj, function(context) {\n      var method = func;\n      if (!method) {\n        if (contextPath && contextPath.length) {\n          context = deepGet(context, contextPath);\n        }\n        if (context == null) return void 0;\n        method = context[path];\n      }\n      return method == null ? method : method.apply(context, args);\n    });\n  });\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, _.property(key));\n  };\n\n  // Convenience version of a common use case of `filter`: selecting only objects\n  // containing specific `key:value` pairs.\n  _.where = function(obj, attrs) {\n    return _.filter(obj, _.matcher(attrs));\n  };\n\n  // Convenience version of a common use case of `find`: getting the first object\n  // containing specific `key:value` pairs.\n  _.findWhere = function(obj, attrs) {\n    return _.find(obj, _.matcher(attrs));\n  };\n\n  // Return the maximum element (or element-based computation).\n  _.max = function(obj, iteratee, context) {\n    var result = -Infinity, lastComputed = -Infinity,\n        value, computed;\n    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value != null && value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(v, index, list) {\n        computed = iteratee(v, index, list);\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = v;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iteratee, context) {\n    var result = Infinity, lastComputed = Infinity,\n        value, computed;\n    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value != null && value < result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(v, index, list) {\n        computed = iteratee(v, index, list);\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = v;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Shuffle a collection.\n  _.shuffle = function(obj) {\n    return _.sample(obj, Infinity);\n  };\n\n  // Sample **n** random values from a collection using the modern version of the\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `map`.\n  _.sample = function(obj, n, guard) {\n    if (n == null || guard) {\n      if (!isArrayLike(obj)) obj = _.values(obj);\n      return obj[_.random(obj.length - 1)];\n    }\n    var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);\n    var length = getLength(sample);\n    n = Math.max(Math.min(n, length), 0);\n    var last = length - 1;\n    for (var index = 0; index < n; index++) {\n      var rand = _.random(index, last);\n      var temp = sample[index];\n      sample[index] = sample[rand];\n      sample[rand] = temp;\n    }\n    return sample.slice(0, n);\n  };\n\n  // Sort the object's values by a criterion produced by an iteratee.\n  _.sortBy = function(obj, iteratee, context) {\n    var index = 0;\n    iteratee = cb(iteratee, context);\n    return _.pluck(_.map(obj, function(value, key, list) {\n      return {\n        value: value,\n        index: index++,\n        criteria: iteratee(value, key, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  };\n\n  // An internal function used for aggregate \"group by\" operations.\n  var group = function(behavior, partition) {\n    return function(obj, iteratee, context) {\n      var result = partition ? [[], []] : {};\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index) {\n        var key = iteratee(value, index, obj);\n        behavior(result, value, key);\n      });\n      return result;\n    };\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = group(function(result, value, key) {\n    if (has(result, key)) result[key].push(value); else result[key] = [value];\n  });\n\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for\n  // when you know that your index values will be unique.\n  _.indexBy = group(function(result, value, key) {\n    result[key] = value;\n  });\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  _.countBy = group(function(result, value, key) {\n    if (has(result, key)) result[key]++; else result[key] = 1;\n  });\n\n  var reStrSymbol = /[^\\ud800-\\udfff]|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\ud800-\\udfff]/g;\n  // Safely create a real, live array from anything iterable.\n  _.toArray = function(obj) {\n    if (!obj) return [];\n    if (_.isArray(obj)) return slice.call(obj);\n    if (_.isString(obj)) {\n      // Keep surrogate pair characters together\n      return obj.match(reStrSymbol);\n    }\n    if (isArrayLike(obj)) return _.map(obj, _.identity);\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    if (obj == null) return 0;\n    return isArrayLike(obj) ? obj.length : _.keys(obj).length;\n  };\n\n  // Split a collection into two arrays: one whose elements all satisfy the given\n  // predicate, and one whose elements all do not satisfy the predicate.\n  _.partition = group(function(result, value, pass) {\n    result[pass ? 0 : 1].push(value);\n  }, true);\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function(array, n, guard) {\n    if (array == null || array.length < 1) return n == null ? void 0 : [];\n    if (n == null || guard) return array[0];\n    return _.initial(array, array.length - n);\n  };\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N.\n  _.initial = function(array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array.\n  _.last = function(array, n, guard) {\n    if (array == null || array.length < 1) return n == null ? void 0 : [];\n    if (n == null || guard) return array[array.length - 1];\n    return _.rest(array, Math.max(0, array.length - n));\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n  // Especially useful on the arguments object. Passing an **n** will return\n  // the rest N values in the array.\n  _.rest = _.tail = _.drop = function(array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, Boolean);\n  };\n\n  // Internal implementation of a recursive `flatten` function.\n  var flatten = function(input, shallow, strict, output) {\n    output = output || [];\n    var idx = output.length;\n    for (var i = 0, length = getLength(input); i < length; i++) {\n      var value = input[i];\n      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\n        // Flatten current level of array or arguments object.\n        if (shallow) {\n          var j = 0, len = value.length;\n          while (j < len) output[idx++] = value[j++];\n        } else {\n          flatten(value, shallow, strict, output);\n          idx = output.length;\n        }\n      } else if (!strict) {\n        output[idx++] = value;\n      }\n    }\n    return output;\n  };\n\n  // Flatten out an array, either recursively (by default), or just one level.\n  _.flatten = function(array, shallow) {\n    return flatten(array, shallow, false);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = restArguments(function(array, otherArrays) {\n    return _.difference(array, otherArrays);\n  });\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // The faster algorithm will not work with an iteratee if the iteratee\n  // is not a one-to-one function, so providing an iteratee will disable\n  // the faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted, iteratee, context) {\n    if (!_.isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n    if (iteratee != null) iteratee = cb(iteratee, context);\n    var result = [];\n    var seen = [];\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var value = array[i],\n          computed = iteratee ? iteratee(value, i, array) : value;\n      if (isSorted && !iteratee) {\n        if (!i || seen !== computed) result.push(value);\n        seen = computed;\n      } else if (iteratee) {\n        if (!_.contains(seen, computed)) {\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (!_.contains(result, value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = restArguments(function(arrays) {\n    return _.uniq(flatten(arrays, true, true));\n  });\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  _.intersection = function(array) {\n    var result = [];\n    var argsLength = arguments.length;\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var item = array[i];\n      if (_.contains(result, item)) continue;\n      var j;\n      for (j = 1; j < argsLength; j++) {\n        if (!_.contains(arguments[j], item)) break;\n      }\n      if (j === argsLength) result.push(item);\n    }\n    return result;\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = restArguments(function(array, rest) {\n    rest = flatten(rest, true, true);\n    return _.filter(array, function(value){\n      return !_.contains(rest, value);\n    });\n  });\n\n  // Complement of _.zip. Unzip accepts an array of arrays and groups\n  // each array's elements on shared indices.\n  _.unzip = function(array) {\n    var length = array && _.max(array, getLength).length || 0;\n    var result = Array(length);\n\n    for (var index = 0; index < length; index++) {\n      result[index] = _.pluck(array, index);\n    }\n    return result;\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = restArguments(_.unzip);\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values. Passing by pairs is the reverse of _.pairs.\n  _.object = function(list, values) {\n    var result = {};\n    for (var i = 0, length = getLength(list); i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  };\n\n  // Generator function to create the findIndex and findLastIndex functions.\n  var createPredicateIndexFinder = function(dir) {\n    return function(array, predicate, context) {\n      predicate = cb(predicate, context);\n      var length = getLength(array);\n      var index = dir > 0 ? 0 : length - 1;\n      for (; index >= 0 && index < length; index += dir) {\n        if (predicate(array[index], index, array)) return index;\n      }\n      return -1;\n    };\n  };\n\n  // Returns the first index on an array-like that passes a predicate test.\n  _.findIndex = createPredicateIndexFinder(1);\n  _.findLastIndex = createPredicateIndexFinder(-1);\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iteratee, context) {\n    iteratee = cb(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0, high = getLength(array);\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2);\n      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n    }\n    return low;\n  };\n\n  // Generator function to create the indexOf and lastIndexOf functions.\n  var createIndexFinder = function(dir, predicateFind, sortedIndex) {\n    return function(array, item, idx) {\n      var i = 0, length = getLength(array);\n      if (typeof idx == 'number') {\n        if (dir > 0) {\n          i = idx >= 0 ? idx : Math.max(idx + length, i);\n        } else {\n          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n        }\n      } else if (sortedIndex && idx && length) {\n        idx = sortedIndex(array, item);\n        return array[idx] === item ? idx : -1;\n      }\n      if (item !== item) {\n        idx = predicateFind(slice.call(array, i, length), _.isNaN);\n        return idx >= 0 ? idx + i : -1;\n      }\n      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n        if (array[idx] === item) return idx;\n      }\n      return -1;\n    };\n  };\n\n  // Return the position of the first occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);\n  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (stop == null) {\n      stop = start || 0;\n      start = 0;\n    }\n    if (!step) {\n      step = stop < start ? -1 : 1;\n    }\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var range = Array(length);\n\n    for (var idx = 0; idx < length; idx++, start += step) {\n      range[idx] = start;\n    }\n\n    return range;\n  };\n\n  // Chunk a single array into multiple arrays, each containing `count` or fewer\n  // items.\n  _.chunk = function(array, count) {\n    if (count == null || count < 1) return [];\n    var result = [];\n    var i = 0, length = array.length;\n    while (i < length) {\n      result.push(slice.call(array, i, i += count));\n    }\n    return result;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Determines whether to execute a function as a constructor\n  // or a normal function with the provided arguments.\n  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n    var self = baseCreate(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if (_.isObject(result)) return result;\n    return self;\n  };\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n  // available.\n  _.bind = restArguments(function(func, context, args) {\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n    var bound = restArguments(function(callArgs) {\n      return executeBound(func, bound, context, this, args.concat(callArgs));\n    });\n    return bound;\n  });\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts\n  // as a placeholder by default, allowing any combination of arguments to be\n  // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.\n  _.partial = restArguments(function(func, boundArgs) {\n    var placeholder = _.partial.placeholder;\n    var bound = function() {\n      var position = 0, length = boundArgs.length;\n      var args = Array(length);\n      for (var i = 0; i < length; i++) {\n        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];\n      }\n      while (position < arguments.length) args.push(arguments[position++]);\n      return executeBound(func, bound, this, this, args);\n    };\n    return bound;\n  });\n\n  _.partial.placeholder = _;\n\n  // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n  _.bindAll = restArguments(function(obj, keys) {\n    keys = flatten(keys, false, false);\n    var index = keys.length;\n    if (index < 1) throw new Error('bindAll must be passed function names');\n    while (index--) {\n      var key = keys[index];\n      obj[key] = _.bind(obj[key], obj);\n    }\n  });\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memoize = function(key) {\n      var cache = memoize.cache;\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n      if (!has(cache, address)) cache[address] = func.apply(this, arguments);\n      return cache[address];\n    };\n    memoize.cache = {};\n    return memoize;\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = restArguments(function(func, wait, args) {\n    return setTimeout(function() {\n      return func.apply(null, args);\n    }, wait);\n  });\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = _.partial(_.delay, _, 1);\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n  _.throttle = function(func, wait, options) {\n    var timeout, context, args, result;\n    var previous = 0;\n    if (!options) options = {};\n\n    var later = function() {\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n\n    var throttled = function() {\n      var now = _.now();\n      if (!previous && options.leading === false) previous = now;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n\n    throttled.cancel = function() {\n      clearTimeout(timeout);\n      previous = 0;\n      timeout = context = args = null;\n    };\n\n    return throttled;\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function(func, wait, immediate) {\n    var timeout, result;\n\n    var later = function(context, args) {\n      timeout = null;\n      if (args) result = func.apply(context, args);\n    };\n\n    var debounced = restArguments(function(args) {\n      if (timeout) clearTimeout(timeout);\n      if (immediate) {\n        var callNow = !timeout;\n        timeout = setTimeout(later, wait);\n        if (callNow) result = func.apply(this, args);\n      } else {\n        timeout = _.delay(later, wait, this, args);\n      }\n\n      return result;\n    });\n\n    debounced.cancel = function() {\n      clearTimeout(timeout);\n      timeout = null;\n    };\n\n    return debounced;\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return _.partial(wrapper, func);\n  };\n\n  // Returns a negated version of the passed-in predicate.\n  _.negate = function(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var args = arguments;\n    var start = args.length - 1;\n    return function() {\n      var i = start;\n      var result = args[start].apply(this, arguments);\n      while (i--) result = args[i].call(this, result);\n      return result;\n    };\n  };\n\n  // Returns a function that will only be executed on and after the Nth call.\n  _.after = function(times, func) {\n    return function() {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  };\n\n  // Returns a function that will only be executed up to (but not including) the Nth call.\n  _.before = function(times, func) {\n    var memo;\n    return function() {\n      if (--times > 0) {\n        memo = func.apply(this, arguments);\n      }\n      if (times <= 1) func = null;\n      return memo;\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = _.partial(_.before, 2);\n\n  _.restArguments = restArguments;\n\n  // Object Functions\n  // ----------------\n\n  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\n  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',\n    'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n\n  var collectNonEnumProps = function(obj, keys) {\n    var nonEnumIdx = nonEnumerableProps.length;\n    var constructor = obj.constructor;\n    var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;\n\n    // Constructor is a special case.\n    var prop = 'constructor';\n    if (has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);\n\n    while (nonEnumIdx--) {\n      prop = nonEnumerableProps[nonEnumIdx];\n      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {\n        keys.push(prop);\n      }\n    }\n  };\n\n  // Retrieve the names of an object's own properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`.\n  _.keys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n    for (var key in obj) if (has(obj, key)) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve all the property names of an object.\n  _.allKeys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    var keys = [];\n    for (var key in obj) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var values = Array(length);\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[keys[i]];\n    }\n    return values;\n  };\n\n  // Returns the results of applying the iteratee to each element of the object.\n  // In contrast to _.map it returns an object.\n  _.mapObject = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys = _.keys(obj),\n        length = keys.length,\n        results = {};\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys[index];\n      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  // Convert an object into a list of `[key, value]` pairs.\n  // The opposite of _.object.\n  _.pairs = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n\n  // Invert the keys and values of an object. The values must be serializable.\n  _.invert = function(obj) {\n    var result = {};\n    var keys = _.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      result[obj[keys[i]]] = keys[i];\n    }\n    return result;\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`.\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // An internal function for creating assigner functions.\n  var createAssigner = function(keysFunc, defaults) {\n    return function(obj) {\n      var length = arguments.length;\n      if (defaults) obj = Object(obj);\n      if (length < 2 || obj == null) return obj;\n      for (var index = 1; index < length; index++) {\n        var source = arguments[index],\n            keys = keysFunc(source),\n            l = keys.length;\n        for (var i = 0; i < l; i++) {\n          var key = keys[i];\n          if (!defaults || obj[key] === void 0) obj[key] = source[key];\n        }\n      }\n      return obj;\n    };\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = createAssigner(_.allKeys);\n\n  // Assigns a given object with all the own properties in the passed-in object(s).\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n  _.extendOwn = _.assign = createAssigner(_.keys);\n\n  // Returns the first key on an object that passes a predicate test.\n  _.findKey = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = _.keys(obj), key;\n    for (var i = 0, length = keys.length; i < length; i++) {\n      key = keys[i];\n      if (predicate(obj[key], key, obj)) return key;\n    }\n  };\n\n  // Internal pick helper function to determine if `obj` has key `key`.\n  var keyInObj = function(value, key, obj) {\n    return key in obj;\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = restArguments(function(obj, keys) {\n    var result = {}, iteratee = keys[0];\n    if (obj == null) return result;\n    if (_.isFunction(iteratee)) {\n      if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);\n      keys = _.allKeys(obj);\n    } else {\n      iteratee = keyInObj;\n      keys = flatten(keys, false, false);\n      obj = Object(obj);\n    }\n    for (var i = 0, length = keys.length; i < length; i++) {\n      var key = keys[i];\n      var value = obj[key];\n      if (iteratee(value, key, obj)) result[key] = value;\n    }\n    return result;\n  });\n\n  // Return a copy of the object without the blacklisted properties.\n  _.omit = restArguments(function(obj, keys) {\n    var iteratee = keys[0], context;\n    if (_.isFunction(iteratee)) {\n      iteratee = _.negate(iteratee);\n      if (keys.length > 1) context = keys[1];\n    } else {\n      keys = _.map(flatten(keys, false, false), String);\n      iteratee = function(value, key) {\n        return !_.contains(keys, key);\n      };\n    }\n    return _.pick(obj, iteratee, context);\n  });\n\n  // Fill in a given object with default properties.\n  _.defaults = createAssigner(_.allKeys, true);\n\n  // Creates an object that inherits from the given prototype object.\n  // If additional properties are provided then they will be added to the\n  // created object.\n  _.create = function(prototype, props) {\n    var result = baseCreate(prototype);\n    if (props) _.extendOwn(result, props);\n    return result;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Returns whether an object has a given set of `key:value` pairs.\n  _.isMatch = function(object, attrs) {\n    var keys = _.keys(attrs), length = keys.length;\n    if (object == null) return !length;\n    var obj = Object(object);\n    for (var i = 0; i < length; i++) {\n      var key = keys[i];\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;\n    }\n    return true;\n  };\n\n\n  // Internal recursive comparison function for `isEqual`.\n  var eq, deepEq;\n  eq = function(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    // `null` or `undefined` only equal to itself (strict comparison).\n    if (a == null || b == null) return false;\n    // `NaN`s are equivalent, but non-reflexive.\n    if (a !== a) return b !== b;\n    // Exhaust primitive checks\n    var type = typeof a;\n    if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;\n    return deepEq(a, b, aStack, bStack);\n  };\n\n  // Internal recursive comparison function for `isEqual`.\n  deepEq = function(a, b, aStack, bStack) {\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n      case '[object RegExp]':\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN.\n        if (+a !== +a) return +b !== +b;\n        // An `egal` comparison is performed for other numeric values.\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n      case '[object Symbol]':\n        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);\n    }\n\n    var areArrays = className === '[object Array]';\n    if (!areArrays) {\n      if (typeof a != 'object' || typeof b != 'object') return false;\n\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n      var aCtor = a.constructor, bCtor = b.constructor;\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n                               _.isFunction(bCtor) && bCtor instanceof bCtor)\n                          && ('constructor' in a && 'constructor' in b)) {\n        return false;\n      }\n    }\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    }\n\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false;\n      // Deep compare the contents, ignoring non-numeric properties.\n      while (length--) {\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var keys = _.keys(a), key;\n      length = keys.length;\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\n      if (_.keys(b).length !== length) return false;\n      while (length--) {\n        // Deep compare each member\n        key = keys[length];\n        if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return true;\n  };\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    return eq(a, b);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function(obj) {\n    if (obj == null) return true;\n    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;\n    return _.keys(obj).length === 0;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType === 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) === '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  };\n\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError, isMap, isWeakMap, isSet, isWeakSet.\n  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error', 'Symbol', 'Map', 'WeakMap', 'Set', 'WeakSet'], function(name) {\n    _['is' + name] = function(obj) {\n      return toString.call(obj) === '[object ' + name + ']';\n    };\n  });\n\n  // Define a fallback version of the method in browsers (ahem, IE < 9), where\n  // there isn't any inspectable \"Arguments\" type.\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function(obj) {\n      return has(obj, 'callee');\n    };\n  }\n\n  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,\n  // IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).\n  var nodelist = root.document && root.document.childNodes;\n  if (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {\n    _.isFunction = function(obj) {\n      return typeof obj == 'function' || false;\n    };\n  }\n\n  // Is a given object a finite number?\n  _.isFinite = function(obj) {\n    return !_.isSymbol(obj) && isFinite(obj) && !isNaN(parseFloat(obj));\n  };\n\n  // Is the given value `NaN`?\n  _.isNaN = function(obj) {\n    return _.isNumber(obj) && isNaN(obj);\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Shortcut function for checking if an object has a given property directly\n  // on itself (in other words, not on a prototype).\n  _.has = function(obj, path) {\n    if (!_.isArray(path)) {\n      return has(obj, path);\n    }\n    var length = path.length;\n    for (var i = 0; i < length; i++) {\n      var key = path[i];\n      if (obj == null || !hasOwnProperty.call(obj, key)) {\n        return false;\n      }\n      obj = obj[key];\n    }\n    return !!length;\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iteratees.\n  _.identity = function(value) {\n    return value;\n  };\n\n  // Predicate-generating functions. Often useful outside of Underscore.\n  _.constant = function(value) {\n    return function() {\n      return value;\n    };\n  };\n\n  _.noop = function(){};\n\n  // Creates a function that, when passed an object, will traverse that object’s\n  // properties down the given `path`, specified as an array of keys or indexes.\n  _.property = function(path) {\n    if (!_.isArray(path)) {\n      return shallowProperty(path);\n    }\n    return function(obj) {\n      return deepGet(obj, path);\n    };\n  };\n\n  // Generates a function for a given object that returns a given property.\n  _.propertyOf = function(obj) {\n    if (obj == null) {\n      return function(){};\n    }\n    return function(path) {\n      return !_.isArray(path) ? obj[path] : deepGet(obj, path);\n    };\n  };\n\n  // Returns a predicate for checking whether an object has a given set of\n  // `key:value` pairs.\n  _.matcher = _.matches = function(attrs) {\n    attrs = _.extendOwn({}, attrs);\n    return function(obj) {\n      return _.isMatch(obj, attrs);\n    };\n  };\n\n  // Run a function **n** times.\n  _.times = function(n, iteratee, context) {\n    var accum = Array(Math.max(0, n));\n    iteratee = optimizeCb(iteratee, context, 1);\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n    return accum;\n  };\n\n  // Return a random integer between min and max (inclusive).\n  _.random = function(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  };\n\n  // A (possibly faster) way to get the current timestamp as an integer.\n  _.now = Date.now || function() {\n    return new Date().getTime();\n  };\n\n  // List of HTML entities for escaping.\n  var escapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;'\n  };\n  var unescapeMap = _.invert(escapeMap);\n\n  // Functions for escaping and unescaping strings to/from HTML interpolation.\n  var createEscaper = function(map) {\n    var escaper = function(match) {\n      return map[match];\n    };\n    // Regexes for identifying a key that needs to be escaped.\n    var source = '(?:' + _.keys(map).join('|') + ')';\n    var testRegexp = RegExp(source);\n    var replaceRegexp = RegExp(source, 'g');\n    return function(string) {\n      string = string == null ? '' : '' + string;\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n    };\n  };\n  _.escape = createEscaper(escapeMap);\n  _.unescape = createEscaper(unescapeMap);\n\n  // Traverses the children of `obj` along `path`. If a child is a function, it\n  // is invoked with its parent as context. Returns the value of the final\n  // child, or `fallback` if any child is undefined.\n  _.result = function(obj, path, fallback) {\n    if (!_.isArray(path)) path = [path];\n    var length = path.length;\n    if (!length) {\n      return _.isFunction(fallback) ? fallback.call(obj) : fallback;\n    }\n    for (var i = 0; i < length; i++) {\n      var prop = obj == null ? void 0 : obj[path[i]];\n      if (prop === void 0) {\n        prop = fallback;\n        i = length; // Ensure we don't continue iterating.\n      }\n      obj = _.isFunction(prop) ? prop.call(obj) : prop;\n    }\n    return obj;\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate: /<%([\\s\\S]+?)%>/g,\n    interpolate: /<%=([\\s\\S]+?)%>/g,\n    escape: /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    \"'\": \"'\",\n    '\\\\': '\\\\',\n    '\\r': 'r',\n    '\\n': 'n',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escapeRegExp = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\n  var escapeChar = function(match) {\n    return '\\\\' + escapes[match];\n  };\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  // NB: `oldSettings` only exists for backwards compatibility.\n  _.template = function(text, settings, oldSettings) {\n    if (!settings && oldSettings) settings = oldSettings;\n    settings = _.defaults({}, settings, _.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = RegExp([\n      (settings.escape || noMatch).source,\n      (settings.interpolate || noMatch).source,\n      (settings.evaluate || noMatch).source\n    ].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);\n      index = offset + match.length;\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      } else if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      } else if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      }\n\n      // Adobe VMs need the match returned to produce the correct offset.\n      return match;\n    });\n    source += \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n      source + 'return __p;\\n';\n\n    var render;\n    try {\n      render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled source as a convenience for precompilation.\n    var argument = settings.variable || 'obj';\n    template.source = 'function(' + argument + '){\\n' + source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function. Start chaining a wrapped Underscore object.\n  _.chain = function(obj) {\n    var instance = _(obj);\n    instance._chain = true;\n    return instance;\n  };\n\n  // OOP\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n\n  // Helper function to continue chaining intermediate results.\n  var chainResult = function(instance, obj) {\n    return instance._chain ? _(obj).chain() : obj;\n  };\n\n  // Add your own custom functions to the Underscore object.\n  _.mixin = function(obj) {\n    _.each(_.functions(obj), function(name) {\n      var func = _[name] = obj[name];\n      _.prototype[name] = function() {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return chainResult(this, func.apply(_, args));\n      };\n    });\n    return _;\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n      return chainResult(this, obj);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  _.each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      return chainResult(this, method.apply(this._wrapped, arguments));\n    };\n  });\n\n  // Extracts the result from a wrapped and chained object.\n  _.prototype.value = function() {\n    return this._wrapped;\n  };\n\n  // Provide unwrapping proxy for some methods used in engine operations\n  // such as arithmetic and JSON stringification.\n  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n\n  _.prototype.toString = function() {\n    return String(this._wrapped);\n  };\n\n  // AMD registration happens at the end for compatibility with AMD loaders\n  // that may not enforce next-turn semantics on modules. Even though general\n  // practice for AMD registration is to be anonymous, underscore registers\n  // as a named module because, like jQuery, it is a base library that is\n  // popular enough to be bundled in a third party lib, but not be part of\n  // an AMD load request. Those cases could generate an error when an\n  // anonymous define() is called outside of a loader request.\n  if (typeof define == 'function' && define.amd) {\n    define('underscore', [], function() {\n      return _;\n    });\n  }\n}());\n","'use strict'\n\n/**\n * @desc Helper class for drawing rooms when generating dungeons\n * @constructor\n *\n * @param {Number} x - The x coordinate of the top side of the room\n * @param {Number} y - The y coordinate of the left hand side of the room\n * @param {Number} width - The width of the room\n * @param {Number} height - The height of the room\n */\nconst Room = function Room (x, y, width, height) {\n  this.x = x\n  this.y = y\n  this.width = width\n  this.height = height\n}\n\n/**\n * @desc Returns the bounding box for this room\n * @function\n *\n * @returns {Object} - Bounding box object containing a top, right, bottom and\n * left value.\n */\nRoom.prototype.getBoundingBox = function getBoundingBox () {\n  return {\n    top: this.y,\n    right: this.x + this.width,\n    bottom: this.y + this.height,\n    left: this.x\n  }\n}\n\n/**\n * @desc Compares this room with an entity that has a bounding box method to see\n * if they intersect.\n *\n * @param {Object} other - An object with a getBoundingBox() method\n *\n * @returns {Boolean} - true if there is an intersection\n */\nRoom.prototype.intersects = function intersects (other) {\n  if (!other.getBoundingBox) {\n    throw new Error('Given entity has no method getBoundingBox')\n  }\n  var r1 = this.getBoundingBox()\n  var r2 = other.getBoundingBox()\n\n  return !(r2.left > r1.right ||\n           r2.right < r1.left ||\n           r2.top > r1.bottom ||\n           r2.bottom < r1.top)\n}\n\nmodule.exports = Room\n","'use strict'\n\n/**\n * @desc Class for a single tilein a dungeon\n * @constructor\n *\n * @param {String} type - The type of tile, e.g. 'wall', 'floor'\n */\nconst Tile = function Tile (type) {\n  this.type = type\n  this.neighbours = []\n}\n\n/**\n * @desc Sets an array containing this tiles immediate neighbours\n *\n * @param {Object[]} neighbours - An array of neighbouring Tiles\n *\n * @return {Object} - returns the Tile object, useful for chaining\n */\nTile.prototype.setNeighbours = function (neighbours) {\n  this.neighbours = neighbours\n  return this\n}\n\nmodule.exports = Tile\n","/**\n * Based on Bob Nystrom's procedural dungeon generation logic that he wrote for Hauberk\n * http://journal.stuffwithstuff.com/2014/12/21/rooms-and-mazes/\n */\n\n'use strict'\n\nconst Victor = require('victor')\nconst _ = require('underscore')\n\nconst Room = require('./room')\nconst Tile = require('./tile')\n\nconst getTileNESW = (tile) => {\n  const tiles = []\n  if (tile.neighbours.n) {\n    tiles.push(tile.neighbours.n)\n  }\n  if (tile.neighbours.e) {\n    tiles.push(tile.neighbours.e)\n  }\n  if (tile.neighbours.s) {\n    tiles.push(tile.neighbours.s)\n  }\n  if (tile.neighbours.w) {\n    tiles.push(tile.neighbours.w)\n  }\n\n  return tiles\n}\n\n/**\n * @desc The random dungeon generator.\n *\n * Starting with a stage of solid walls, it works like so:\n *\n * 1. Place a number of randomly sized and positioned rooms. If a room\n *    overlaps an existing room, it is discarded. Any remaining rooms are\n *    carved out.\n * 2. Any remaining solid areas are filled in with mazes. The maze generator\n *    will grow and fill in even odd-shaped areas, but will not touch any\n *    rooms.\n * 3. The result of the previous two steps is a series of unconnected rooms\n *    and mazes. We walk the stage and find every tile that can be a\n *    \"connector\". This is a solid tile that is adjacent to two unconnected\n *    regions.\n * 4. We randomly choose connectors and open them or place a door there until\n *    all of the unconnected regions have been joined. There is also a slight\n *    chance to carve a connector between two already-joined regions, so that\n *    the dungeon isn't single connected.\n * 5. The mazes will have a lot of dead ends. Finally, we remove those by\n *    repeatedly filling in any open tile that's closed on three sides. When\n *    this is done, every corridor in a maze actually leads somewhere.\n *\n * The end result of this is a multiply-connected dungeon with rooms and lots\n * of winding corridors.\n *\n * @constructor\n */\nconst Dungeon = function Dungeon () {\n  var numRoomTries = 50\n\n  // The inverse chance of adding a connector between two regions that have\n  // already been joined. Increasing this leads to more loosely connected\n  // dungeons.\n  var extraConnectorChance = 50\n\n  // Increasing this allows rooms to be larger.\n  var roomExtraSize = 0\n\n  var windingPercent = 50\n\n  var _rooms = []\n\n  // The index of the current region being carved.\n  var _currentRegion = -1\n\n  var stage\n\n  const n = new Victor(0, 1)\n  const e = new Victor(1, 0)\n  const s = new Victor(0, -1)\n  const w = new Victor(-1, 0)\n\n  // The four cardinal directions: north, south, east, and west.\n  const cardinalDirections = [n, e, s, w]\n\n  const bindStage = (givenStage) => {\n    stage = givenStage\n  }\n\n  let _tiles = []\n\n  /**\n   * @desc returns a tile at the provided coordinates\n   *\n   * @param {Number} x - The x coordinate to retrieve\n   * @param {Number} y - The y coordinate to retrieve\n   *\n   * @returns {Object} - A Tile object\n   */\n  const getTile = (x, y) => {\n    return _tiles[x][y]\n  }\n\n  /**\n   * @desc Sets a tile's type and region. This function will thrown an error if\n   * the tile doesn't exist.\n   *\n   * @param {Number} x - The x coordinate of the tile to set\n   * @param {Number} y - The y coordinate of the tile to set\n   * @param {String} type - The type to set on the tile\n   *\n   * @returns {Object} - The Tile object or null if the tile was not found\n   *\n   */\n  const setTile = (x, y, type) => {\n    if (_tiles[x] && _tiles[x][y]) {\n      _tiles[x][y].type = type\n      _tiles[x][y].region = _currentRegion\n\n      return _tiles[x][y]\n    }\n\n    throw new RangeError(`tile at ${x}, ${y} is unreachable`)\n  }\n\n  /**\n   * @desc Generates tile data to the dimension of the stage.\n   *\n   * @param {String} type - The tile type to set on newly created tiles\n   *\n   * @returns {Array} - The _tiles array\n   */\n  const fill = (type) => {\n    let neighbours = {}\n    var x\n    var y\n\n    for (x = 0; x < stage.width; x++) {\n      _tiles.push([])\n      for (y = 0; y < stage.height; y++) {\n        _tiles[x].push(new Tile(type))\n      }\n    }\n\n    for (x = 0; x < stage.width; x++) {\n      for (y = 0; y < stage.height; y++) {\n        neighbours = {}\n        if (_tiles[x][y - 1]) {\n          neighbours.n = _tiles[x][y - 1]\n        }\n        if (_tiles[x + 1] && _tiles[x + 1][y - 1]) {\n          neighbours.ne = _tiles[x + 1][y - 1]\n        }\n        if (_tiles[x + 1] && _tiles[x + 1][y]) {\n          neighbours.e = _tiles[x + 1][y]\n        }\n        if (_tiles[x + 1] && _tiles[x + 1][y + 1]) {\n          neighbours.se = _tiles[x + 1][y + 1]\n        }\n        if (_tiles[x] && _tiles[x][y + 1]) {\n          neighbours.s = _tiles[x][y + 1]\n        }\n        if (_tiles[x - 1] && _tiles[x - 1][y + 1]) {\n          neighbours.sw = _tiles[x - 1][y + 1]\n        }\n        if (_tiles[x - 1] && _tiles[x - 1][y]) {\n          neighbours.w = _tiles[x - 1][y]\n        }\n        if (_tiles[x - 1] && _tiles[x - 1][y - 1]) {\n          neighbours.nw = _tiles[x - 1][y - 1]\n        }\n        _tiles[x][y].setNeighbours(neighbours)\n      }\n    }\n\n    return _tiles\n  }\n\n  /**\n   * @desc Master function for generating a dungeon\n   *\n   * @param {Object} stage - An object with a width key and a height key. Used\n   * to determine the size of the dungeon. Must be odd with and height.\n   *\n   * @returns {Object} - Tile information for the dungeon\n   */\n  const build = (stage) => {\n    if (stage.width % 2 === 0 || stage.height % 2 === 0) {\n      throw new Error('The stage must be odd-sized.')\n    }\n\n    bindStage(stage)\n\n    fill('wall')\n\n    _addRooms()\n\n    // Fill in all of the empty space with mazes.\n    for (var y = 1; y < stage.height; y += 2) {\n      for (var x = 1; x < stage.width; x += 2) {\n        // Skip the maze generation if the tile is already carved\n        if (getTile(x, y).type === 'floor') {\n          continue\n        }\n        _growMaze(x, y)\n      }\n    }\n\n    _connectRegions()\n\n    _removeDeadEnds()\n\n    return {\n      rooms: _rooms,\n      tiles: _tiles\n    }\n  }\n\n  /**\n   * @desc Implementation of the \"growing tree\" algorithm from here:\n   * http://www.astrolog.org/labyrnth/algrithm.htm.\n   *\n   * @param {Number} startX - The x coordinate to start at\n   * @param {Number} startY - The y coordinate to start at\n   *\n   * @returns {void}\n   */\n  const _growMaze = (startX, startY) => {\n    var cells = []\n    var lastDir\n\n    if (Object.keys(_tiles[startX][startY].neighbours).filter(x => x.type === 'floor').length > 0) {\n      return\n    }\n\n    _startRegion()\n\n    _carve(startX, startY)\n\n    cells.push(new Victor(startX, startY))\n\n    let count = 0\n\n    while (cells.length && count < 500) {\n      count++\n      var cell = cells[cells.length - 1]\n\n      // See which adjacent cells are open.\n      var unmadeCells = []\n\n      for (let dir of cardinalDirections) {\n        if (_canCarve(cell, dir)) {\n          unmadeCells.push(dir)\n        }\n      }\n\n      if (unmadeCells.length) {\n        // Based on how \"windy\" passages are, try to prefer carving in the\n        // same direction.\n        var dir\n        var stringifiedCells = unmadeCells.map(v => v.toString())\n        if (lastDir && stringifiedCells.indexOf(lastDir.toString()) > -1 && _.random(1, 100) > windingPercent) {\n          dir = lastDir.clone()\n        } else {\n          let rand = _.random(0, unmadeCells.length - 1)\n          dir = unmadeCells[rand].clone()\n        }\n\n        let carveLoc1 = cell.clone().add(dir).toObject()\n        _carve(carveLoc1.x, carveLoc1.y)\n\n        let carveLoc2 = cell.clone().add(dir).add(dir).toObject()\n        _carve(carveLoc2.x, carveLoc2.y)\n\n        cells.push(cell.clone().add(dir).add(dir))\n\n        lastDir = dir.clone()\n      } else {\n        // No adjacent uncarved cells.\n        cells.pop()\n\n        // This path has ended.\n        lastDir = null\n      }\n    }\n  }\n\n  /**\n   * @desc Creates rooms in the dungeon by repeatedly creating random rooms and\n   * seeing if they overlap. Rooms that overlap are discarded. This process is\n   * repeated until it hits the maximum tries determined by the 'numRoomTries'\n   * variable.\n   *\n   * @returns {void}\n   */\n  const _addRooms = () => {\n    for (var i = 0; i < numRoomTries; i++) {\n      // Pick a random room size. The funny math here does two things:\n      // - It makes sure rooms are odd-sized to line up with maze.\n      // - It avoids creating rooms that are too rectangular: too tall and\n      //   narrow or too wide and flat.\n      var size = _.random(1, 3 + roomExtraSize) * 2 + 1\n      var rectangularity = _.random(0, 1 + Math.floor(size / 2)) * 2\n      var width = size\n      var height = size\n      if (_oneIn(2)) {\n        width += rectangularity\n      } else {\n        height += rectangularity\n      }\n\n      var x = _.random(0, Math.floor((stage.width - width) / 2)) * 2 + 1\n      var y = _.random(0, Math.floor((stage.height - height) / 2)) * 2 + 1\n\n      if (x > stage.width - width) {\n        x = stage.width - width - 1\n      }\n\n      if (y > stage.height - height) {\n        y = stage.height - height - 1\n      }\n\n      var room = new Room(x, y, width, height)\n\n      var overlaps = false\n\n      for (var other of _rooms) {\n        if (room.intersects(other)) {\n          overlaps = true\n          break\n        }\n      }\n\n      if (overlaps) {\n        continue\n      }\n\n      _rooms.push(room)\n\n      _startRegion()\n\n      // Convert room tiles to floor\n      carveArea(x, y, width, height)\n    }\n  }\n\n  /**\n   * @desc converts an area of tiles to floor type\n   *\n   * @param {Number} x - The starting x coordinate\n   * @param {Number} y - The starting y coordinate\n   * @param {Number} width - The width of the area to carve\n   * @param {Number} height - The height of the area to carve\n   *\n   * @returns {void}\n   */\n  const carveArea = (x, y, width, height) => {\n    for (var i = x; i < x + width; i++) {\n      for (var j = y; j < y + height; j++) {\n        _carve(i, j)\n      }\n    }\n  }\n\n  /**\n   * @desc Creates doorways between each generated region of tiles\n   *\n   * @return {void}\n   */\n  const _connectRegions = () => {\n    let regionConnections = {}\n    _tiles.forEach(row => {\n      row.forEach(tile => {\n        if (tile.type === 'floor') {\n          return\n        }\n\n        let tileRegions = _.unique(\n          getTileNESW(tile).map(x => x.region)\n            .filter(x => !_.isUndefined(x))\n        )\n        if (tileRegions.length <= 1) {\n          return\n        }\n\n        let key = tileRegions.join('-')\n        if (!regionConnections[key]) {\n          regionConnections[key] = []\n        }\n        regionConnections[key].push(tile)\n      })\n    })\n\n    _.each(regionConnections, (connections) => {\n      let index = _.random(0, connections.length - 1)\n      connections[index].type = 'door'\n      connections.splice(index, 1)\n\n      // Occasional open up additional connections\n      connections.forEach(conn => {\n        if (_oneIn(extraConnectorChance)) {\n          conn.type = 'door'\n        }\n      })\n    })\n  }\n\n  /**\n   * @desc Helper function for calculating random chance. The higher the number\n   * provided the less likely this value is to return true.\n   *\n   * @param {Number} num - The ceiling number that could be calculated\n   *\n   * @returns {Boolean} - True if the function rolled a one\n   *\n   * @example\n   * _oneIn(50); // - Has a 1 in 50 chance of returning true\n   */\n  const _oneIn = (num) => {\n    return _.random(1, num) === 1\n  }\n\n  /**\n   * @desc Fills in dead ends in the dungeon with wall tiles\n   *\n   * @returns {void}\n   */\n  const _removeDeadEnds = () => {\n    var done = false\n\n    const cycle = () => {\n      let done = true\n      _tiles.forEach((row) => {\n        row.forEach((tile) => {\n          // If it only has one exit, it's a dead end --> fill it in!\n          if (tile.type === 'wall') {\n            return\n          }\n          if (getTileNESW(tile).filter(t => t.type !== 'wall').length <= 1) {\n            tile.type = 'wall'\n            done = false\n          }\n        })\n      })\n\n      return done\n    }\n\n    while (!done) {\n      done = true\n      done = cycle()\n    }\n  }\n\n  /**\n   * @desc Gets whether or not an opening can be carved from the given starting\n   * [Cell] at [pos] to the adjacent Cell facing [direction]. Returns `true`\n   * if the starting Cell is in bounds and the destination Cell is filled\n   * (or out of bounds).</returns>\n   *\n   * @param {Victor} cell - Victor JS vector object\n   * @param {Victor} direction - Victor JS vector object indicating direction\n   *\n   * @return {Boolean} - true if the path can be carved\n   */\n  const _canCarve = (cell, direction) => {\n    // Must end in bounds.\n    let end = cell.clone().add(direction).add(direction).add(direction).toObject()\n\n    if (!_tiles[end.x] || !_tiles[end.x][end.y]) {\n      return false\n    }\n\n    if (getTile(end.x, end.y).type !== 'wall') {\n      return false\n    }\n\n    // Destination must not be open.\n    let dest = cell.clone().add(direction).add(direction).toObject()\n    return getTile(dest.x, dest.y).type !== 'floor'\n  }\n\n  /**\n   * @desc Increments the current region. Typically called every time a new area\n   * starts being carved\n   *\n   * @returns {Number} - The current region number\n   */\n  const _startRegion = () => {\n    _currentRegion++\n    return _currentRegion\n  }\n\n  /**\n   * @desc Changes the Tile at a given coordinate to a provided type. Typically\n   * used to change the type to 'floor'\n   *\n   * @param {Number} x - The x coordinate to change\n   * @param {Number} y - The y coordinate to change\n   * @param {String} type - The type to change the tile to. Defaults to 'floor'\n   *\n   * @returns {void}\n   */\n  const _carve = (x, y, type = 'floor') => {\n    setTile(x, y, type)\n  }\n\n  return {\n    build\n  }\n}\n\nconst build = (options) => {\n  return new Dungeon().build(options)\n}\n\nmodule.exports = {\n  build\n}\n","const dungeoneer = require('..')\nconst packageJSON = require('../package')\n\nvar canvas = document.querySelector('canvas')\nvar ctx = canvas.getContext('2d')\n\nctx.imageSmoothingEnabled = false\n\nvar create = function (width, height) {\n  var cellSize = 4\n  var dungeon = dungeoneer.build({\n    width: width,\n    height: height\n  })\n\n  console.log('Generated dungeon', dungeon)\n\n  canvas.width = width * cellSize\n  canvas.height = height * cellSize\n\n  canvas.style.width = width * cellSize + 'px'\n  canvas.style.height = height * cellSize + 'px'\n\n  ctx.fillStyle = 'black'\n  ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n\n  ctx.fillStyle = 'red'\n\n  dungeon.rooms.forEach((room) => {\n    ctx.fillStyle = 'red'\n    ctx.fillRect(room.x * cellSize, room.y * cellSize, room.width * cellSize, room.height * cellSize)\n  })\n\n  ctx.fillStyle = 'rgba(255, 255, 255, 0.5)'\n  for (var i = 0; i < dungeon.tiles.length; i++) {\n    for (var j = 0; j < dungeon.tiles.length; j++) {\n      if (dungeon.tiles[i][j].type === 'floor') {\n        ctx.fillStyle = 'rgba(255, 255, 255, 0.5)'\n        ctx.fillRect(i * cellSize, j * cellSize, cellSize, cellSize)\n      }\n      if (dungeon.tiles[i][j].type === 'door') {\n        ctx.fillStyle = 'yellow'\n        ctx.fillRect(i * cellSize, j * cellSize, cellSize, cellSize)\n      }\n    }\n  }\n}\n\ndocument.querySelector('#dice-svg svg').addEventListener('mousedown', function () {\n  document.querySelector('#dice-svg svg').classList.add('mousedown')\n}, false)\n\ndocument.querySelector('#dice-svg svg').addEventListener('mouseup', function () {\n  document.querySelector('#dice-svg svg').classList.remove('mousedown')\n  create(51, 51)\n}, false)\n\ncreate(51, 51)\n\nconst $version = document.createElement('div')\n$version.innerText = `v${packageJSON.version}`\n$version.style = `\n  color: white;\n  position: absolute;\n  bottom: 16px;\n  left: 16px;\n  font-family: monospace;\n`\ndocument.body.appendChild($version)\n"]}